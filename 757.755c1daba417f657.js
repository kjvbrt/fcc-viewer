"use strict";(self.webpackChunkFCCViewer=self.webpackChunkFCCViewer||[]).push([[757],{7757:(V,g,l)=>{l.r(g),l.d(g,{drawLeafPlayer:()=>R,drawTree:()=>$,drawTreePlayer:()=>y,drawTreePlayerKey:()=>B});var d=l(8428),b=l(8681),x=l(5025),u=l(5431),v=l(2944),p=l(4010),M=l(9275),C=l(6982),I=l(7891),L=l(5596),c=l(8200);function P(s,r,e){let i=r._typename;return i&&"string"==typeof i?0==i.indexOf("TH1")?M.TH1Painter.draw(s,r,e):0==i.indexOf("TH2")?C.TH2Painter.draw(s,r,e):0==i.indexOf("TH3")?I.TH3Painter.draw(s,r,e):0==i.indexOf("TGraph")?L.o.draw(s,r,e):Promise.reject(Error(`Object of type ${i} cannot be draw with TTree`)):Promise.reject(Error("Object without type cannot be draw with TTree"))}function E(s,r){if(r||this.last_pr){if(this.dump||this.testio){if(!r)return;if((0,d.isBatchMode)()){let i=new v.be(this.drawid);return i.selectDom().property("_json_object_",s),Promise.resolve(i)}if("function"==typeof d.internals.drawInspector)return d.internals.drawInspector(this.drawid,s);let e=(0,d.create)("TObjString");return e.fString=(0,d.toJSON)(s,2),(0,p.VE)(this.drawid,e)}return this.last_pr||(this.last_pr=Promise.resolve(!0)),this.last_pr.then(()=>(this.last_pr=this.obj_painter?this.obj_painter.redrawObject(s).then(()=>this.obj_painter):P(this.drawid,s).then(e=>(this.obj_painter=e,r||(this.last_pr=null),e)),r?this.last_pr:null))}}function O(s){return s.draw_first=!0,s.configureOnline=function(r,e,i,t,n){this.setItemName(r,"",this),this.url=e,this.root_version=t,this.askey=i,this.draw_expr=n},s.configureTree=function(r){this.local_tree=r},s.showExtraButtons=function(r){let e=this.selectDom(),i=this.local_tree?this.local_tree.fEntries:0;e.select(".treedraw_more").remove(),e.select(".treedraw_buttons").node().innerHTML+=`Cut: <input class="treedraw_cut ui-corner-all ui-widget" style="width:8em;margin-left:5px" title="cut expression"></input>Opt: <input class="treedraw_opt ui-corner-all ui-widget" style="width:5em;margin-left:5px" title="histogram draw options"></input>Num: <input class="treedraw_number" type="number" min="0" max="${i}" step="1000" style="width:7em;margin-left:5px" title="number of entries to process (default all)"></input>First: <input class="treedraw_first" type="number" min="0" max="${i}" step="1000" style="width:7em;margin-left:5px" title="first entry to process (default first)"></input><button class="treedraw_clear" title="Clear drawing">Clear</button>`,e.select(".treedraw_exe").on("click",()=>this.performDraw()),e.select(".treedraw_cut").property("value",r?.parse_cut||"").on("change",()=>this.performDraw()),e.select(".treedraw_opt").property("value",r?.drawopt||"").on("change",()=>this.performDraw()),e.select(".treedraw_number").attr("value",r?.numentries||""),e.select(".treedraw_first").attr("value",r?.firstentry||""),e.select(".treedraw_clear").on("click",()=>(0,p.Eq)(this.drawid))},s.showPlayer=function(r){let e=this.selectDom();this.drawid="jsroot_tree_player_"+d.internals.id_counter+++"_draw";let i=r?.parse_cut||r?.numentries||r?.firstentry;e.html(`<div style="display:flex; flex-flow:column; height:100%; width:100%;"><div class="treedraw_buttons" style="flex: 0 1 auto;margin-top:0.2em;"><button class="treedraw_exe" title="Execute draw expression" style="margin-left:0.5em">Draw</button>Expr:<input class="treedraw_varexp treedraw_varexp_info" style="width:12em;margin-left:5px" title="draw expression"></input><label class="treedraw_varexp_info">\u24d8</label><button class="treedraw_more">More</button></div><div style="flex: 0 1 auto"><hr/></div><div id="${this.drawid}" style="flex: 1 1 auto; overflow:hidden;"></div></div>`),this.setTopPainter(),this.local_tree&&e.select(".treedraw_buttons").attr("title","Tree draw player for: "+this.local_tree.fName),e.select(".treedraw_exe").on("click",()=>this.performDraw()),e.select(".treedraw_varexp").attr("value",r?.parse_expr||this.draw_expr||"px:py").on("change",()=>this.performDraw()),e.select(".treedraw_varexp_info").attr("title","Example of valid draw expressions:\n  px - 1-dim draw\n  px:py - 2-dim draw\n  px:py:pz - 3-dim draw\n  px+py:px-py - use any expressions\n  px:py>>Graph - create and draw TGraph\n  px:py>>dump - dump extracted variables\n  px:py>>h(50,-5,5,50,-5,5) - custom histogram\n  px:py;hbins:100 - custom number of bins"),i?this.showExtraButtons(r):e.select(".treedraw_more").on("click",()=>this.showExtraButtons(r)),this.checkResize(),(0,c.MG)(this)},s.getValue=function(r){const e=this.selectDom().select(r);if(e.empty())return;const i=e.property("value");return void 0!==i?i:e.attr("value")},s.performLocalDraw=function(){if(!this.local_tree)return;const r=this.selectDom(),e={expr:this.getValue(".treedraw_varexp")};r.select(".treedraw_more").empty()&&(e.cut=this.getValue(".treedraw_cut"),e.cut||delete e.cut,e.drawopt=this.getValue(".treedraw_opt"),"dump"===e.drawopt&&(e.dump=!0,e.drawopt=""),e.drawopt||delete e.drawopt,e.numentries=parseInt(this.getValue(".treedraw_number")),Number.isInteger(e.numentries)||delete e.numentries,e.firstentry=parseInt(this.getValue(".treedraw_first")),Number.isInteger(e.firstentry)||delete e.firstentry),(0,p.Eq)(this.drawid),e.drawid=this.drawid,e.progress=E.bind(e),(0,u.treeDraw)(this.local_tree,e).then(i=>e.progress(i,!0))},s.getDrawOpt=function(){let r="player",e=this.getValue(".treedraw_varexp");return e&&(r+=":"+e),r},s.performDraw=function(){if(this.local_tree)return this.performLocalDraw();let r=this.selectDom(),e=this.url+"/exe.json.gz?compact=3&method=Draw",i=this.getValue(".treedraw_varexp"),t="h_tree_draw",n="",o=i.indexOf(">>");if(o<0)i+=">>"+t;else{t=i.slice(o+2),"+"==t[0]&&(t=t.slice(1));let f=t.indexOf("(");f>0&&(t=t.slice(0,f))}if(r.select(".treedraw_more").empty()){let f=this.getValue(".treedraw_cut"),h=this.getValue(".treedraw_number"),_=this.getValue(".treedraw_first");n=this.getValue(".treedraw_opt"),e+=`&prototype="const char*,const char*,Option_t*,Long64_t,Long64_t"&varexp="${i}"&selection="${f}"`,""==h&&(h=this.root_version>=394499?"TTree::kMaxEntries":"1000000000"),""==_&&(_="0"),e+=`&option="${n}"&nentries=${h}&firstentry=${_}`}else e+=`&prototype="Option_t*"&opt="${i}"`;e+="&_ret_object_="+t;const a=()=>{(0,d.httpRequest)(e,"object").then(f=>{(0,p.Eq)(this.drawid),P(this.drawid,f,n)})};this.draw_expr=i,this.askey?(this.askey=!1,(0,d.httpRequest)(this.url+"/root.json.gz?compact=3","text").then(a)):a()},s.checkResize=function(){(0,p.SI)(this.drawid)},s}function y(s,r,e,i){let t=s.findItem(r),n=s.getTopOnlineItem(t),o="",a=0;if(!t||!n)return null;if(i){for(o=t._name;t&&!t._ttree;)t=t._parent;if(!t)return null;r=s.itemFullName(t)}let f=s.getOnlineItemUrl(r);if(!f)return null;let h=n._root_version||400129,_=s.getDisplay();if(!_)return null;let D=_.findFrame(r,!0);if(!D)return null;let A=(0,b.Ys)(D).attr("id"),w=new v.be(A);if(t._childs&&!i)for(let T=0;T<t._childs.length;++T){let m=t._childs[T];m&&m._kind&&0==m._kind.indexOf("ROOT.TLeaf")&&a<2&&(a++>0&&(o+=":"),o+=m._name)}return O(w),w.configureOnline(r,f,e,h,o),w.showPlayer(),w}function B(s,r){return y(s,r,!0)}function R(s,r){return y(s,r,!1,!0)}function $(s,r,e){let n,o,i=r,t=e;if("TBranchFunc"==r._typename?(t={expr:"."+r.func+"()",branch:r.branch},e&&0==e.indexOf("dump")?t.expr+=">>"+e:e&&(t.expr+=e),i=r.branch.$tree):r.$branch?(t={expr:"."+r.fName+(e||""),branch:r.$branch},(t.branch.fType===u.kClonesNode||t.branch.fType===u.kSTLNode)&&(t.expr=e,t.direct_branch=!0),i=r.$branch.$tree):r.$tree?(!e&&r.fStreamerType&&r.fStreamerType!==x.kt&&r.fStreamerType>=x.C5&&r.fStreamerType<=x.R1&&(e="dump"),t={expr:e,branch:r},i=r.$tree):(t||(t="player"),"string"==typeof t&&(t={expr:t})),!i)throw Error("No TTree object available for TTree::Draw");if("string"==typeof t.expr){let a=t.expr.indexOf("player");0==a?(t.player=!0,t.expr=t.expr.slice(6),":"==t.expr[0]&&(t.expr=t.expr.slice(1))):a>=0&&a==t.expr.length-6&&(t.player=!0,t.expr=t.expr.slice(0,a),a>0&&";"==t.expr[a-1]&&(t.expr=t.expr.slice(0,a-1)))}if(t.player?(n=new p.tK(s,r,e),O(n),n.configureTree(i),n.showPlayer(t),t.drawid=n.drawid):t.drawid=s,t.progress=E.bind(t),"testio"===t.expr)t.testio=!0,t.showProgress=c.Ae,o=(0,u.treeIOTest)(i,t);else{if(!t.expr&&!t.branch)return Promise.resolve(n);o=(0,u.treeDraw)(i,t)}return o.then(a=>t.progress(a,!0))}u.TDrawSelector.prototype.ShowProgress=function(s){if(typeof document>"u"||(0,d.isBatchMode)())return;if(void 0===s||!Number.isFinite(s))return(0,c.Ae)();if(this.last_progress!==s){let n=s-this.last_progress;this.aver_diff||(this.aver_diff=n),this.aver_diff=.3*n+.7*this.aver_diff}let r=0;this.aver_diff<=0?r=0:this.aver_diff<1e-4?r=3:this.aver_diff<.001?r=2:this.aver_diff<.01&&(r=1);let e=document.createElement("p"),i=document.createTextNode("TTree draw "+(100*s).toFixed(r)+" %  "),t=this;e.appendChild(i),e.title="Click on element to break drawing",e.onclick=function(){if(++t._break<3)return e.title="Tree draw will break after next I/O operation",i.nodeValue="Breaking ... ";t.Abort(),(0,c.Ae)()},(0,c.Ae)(e),this.last_progress=s}}}]);